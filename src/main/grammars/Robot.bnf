{
  parserClass="dev.xeonkryptos.xeonrobotframeworkplugin.psi.RobotParser"
  parserUtilClass="dev.xeonkryptos.xeonrobotframeworkplugin.psi.RobotParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Robot"
  psiImplClassSuffix="Impl"
  psiPackage="dev.xeonkryptos.xeonrobotframeworkplugin.psi.element"
  psiImplPackage="dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl"
  psiImplUtilClass="dev.xeonkryptos.xeonrobotframeworkplugin.psi.RobotPsiImplUtil"

  elementTypeHolderClass="dev.xeonkryptos.xeonrobotframeworkplugin.psi.RobotTypes"
  elementTypeClass="dev.xeonkryptos.xeonrobotframeworkplugin.psi.RobotElementType"
  tokenTypeClass="dev.xeonkryptos.xeonrobotframeworkplugin.psi.RobotTokenType"

  implements("parameter|positional_argument")="argument"

  extends(".*_global_setting")="global_setting_statement"

  implements(".*_import_global_setting")="dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.RobotImportGlobalSettingExpression"

  name(".*section")="Section"
  extends(".*_section")="section"

  extends(".*_variable")="variable"

  extends(".*_variable_statement")="variable_statement"

  extends(".*_keyword_call")="keyword_call"

  extends(".*_structure")="executable_statement"

  implements(".*")="dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.RobotStatement"
  extends(".*")="dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotPsiElementBase"

  pin("language")=1

  pin(".*_section")=1
  recoverWhile(".*_section")="section_recover"
}

internal_root ::= !<<eof>> root

root ::= language* section*

language ::= LANGUAGE_KEYWORD language_id {methods=[nameIdentifier="language_id"]}
language_id ::= LANGUAGE_NAME

section ::= settings_section
    | variables_section
    | test_cases_section
    | tasks_section
    | keywords_section
    | comments_section

settings_section ::= SETTINGS_HEADER global_setting_statement* {methods=[nameIdentifier="SETTINGS_HEADER"]}
variables_section ::= VARIABLES_HEADER single_variable_statement* {methods=[nameIdentifier="VARIABLES_HEADER"]}
test_cases_section ::= TEST_CASES_HEADER test_case_statement* {methods=[nameIdentifier="TEST_CASES_HEADER"]}
tasks_section ::= TASKS_HEADER task_statement* {methods=[nameIdentifier="TASKS_HEADER"]}
keywords_section ::= USER_KEYWORDS_HEADER user_keyword_statement* {methods=[nameIdentifier="USER_KEYWORDS_HEADER"]}
comments_section ::= COMMENTS_HEADER COMMENT* {methods=[nameIdentifier="COMMENTS_HEADER"]}
private section_recover ::= !(SETTINGS_HEADER | VARIABLES_HEADER | TEST_CASES_HEADER | TASKS_HEADER | USER_KEYWORDS_HEADER | COMMENTS_HEADER)

global_setting_statement ::= library_import_global_setting
    | resource_import_global_setting
    | variables_import_global_setting
    | metadata_statement_global_setting
    | documentation_statement_global_setting
    | suite_name_statement_global_setting
    | setup_teardown_statements_global_setting
    | tags_statement_global_setting
    | template_statements_global_setting
    | timeout_statements_global_setting
    | unknown_setting_statements_global_setting

library_import_global_setting ::= LIBRARY_IMPORT_KEYWORD positional_argument (parameter | positional_argument)* (WITH_NAME new_library_name)? eol_marker {
    methods=[importedFile="/positional_argument[0]" nameElement="LIBRARY_IMPORT_KEYWORD"]
}
new_library_name ::= LITERAL_CONSTANT
resource_import_global_setting ::= RESOURCE_IMPORT_KEYWORD positional_argument eol_marker {
    pin=3
    methods=[importedFile="positional_argument" nameElement="RESOURCE_IMPORT_KEYWORD"]
}
variables_import_global_setting ::= VARIABLES_IMPORT_KEYWORD positional_argument (parameter | positional_argument)* eol_marker {
    pin=3
    methods=[importedFile="/positional_argument[0]" nameElement="VARIABLES_IMPORT_KEYWORD"]
}
suite_name_statement_global_setting ::= SUITE_NAME_KEYWORD positional_argument eol_marker {
    pin=3
    methods=[nameElement="SUITE_NAME_KEYWORD"]
}
documentation_statement_global_setting ::= DOCUMENTATION_KEYWORD positional_argument* eol_marker {
    pin=3
    methods = [nameElement="DOCUMENTATION_KEYWORD"]
}
metadata_statement_global_setting ::= METADATA_KEYWORD positional_argument* eol_marker {
    pin=3
    methods = [nameElement="METADATA_KEYWORD"]
}
setup_teardown_statements_global_setting ::= SETUP_TEARDOWN_STATEMENT_KEYWORDS (eol_based_keyword_call | variable) {
    pin=3
    methods = [nameElement="SETUP_TEARDOWN_STATEMENT_KEYWORDS"]
}
tags_statement_global_setting ::= TAGS_KEYWORDS positional_argument* eol_marker {
    pin=3
    methods = [nameElement="TAGS_KEYWORDS"]
}
template_statements_global_setting ::= TEMPLATE_KEYWORDS eol_based_keyword_call {
    pin=3
    methods = [nameElement="TEMPLATE_KEYWORDS"]
}
timeout_statements_global_setting ::= TIMEOUT_KEYWORDS positional_argument eol_marker {
    pin=3
    methods = [nameElement="TIMEOUT_KEYWORDS"]
}
unknown_setting_statements_global_setting ::= UNKNOWN_SETTING_KEYWORD (parameter | positional_argument)* eol_marker {
    pin=1
    methods = [nameElement="UNKNOWN_SETTING_KEYWORD"]
}

test_case_statement ::= test_case_id eol_marker? testcase_task_statement* {
    pin=2
    implements = [
        "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.RobotQualifiedNameOwner"
        "com.intellij.navigation.NavigationItem"
    ]
    extends = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotTestCaseExtension"
    methods = [getIcon getQualifiedName]
    stubClass = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotTestCaseStatementStub"
    elementTypeFactory = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotTestCaseStatementStubElement.create"
    recoverWhile=test_case_statement_recover
}
test_case_id ::= TEST_CASE_NAME
private test_case_statement_recover ::= !test_case_id & section_recover
task_statement ::= task_id eol_marker? testcase_task_statement* {
    pin=2
    implements = [
        "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.RobotQualifiedNameOwner"
        "com.intellij.navigation.NavigationItem"
    ]
    extends = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotTaskExtension"
    methods = [getIcon getQualifiedName]
    stubClass = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotTaskStatementStub"
    elementTypeFactory = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotTaskStatementStubElement.create"
    recoverWhile=task_statement_recover
}
task_id ::= TASK_NAME
private task_statement_recover ::= !task_id & section_recover

private testcase_task_statement ::= local_setting
    | bdd_statement
    | executable_statement
    | template_arguments

template_arguments ::= (template_argument | template_parameter | variable)+ eol_marker
template_argument ::= TEMPLATE_ARGUMENT_VALUE
template_parameter ::= template_parameter_id ASSIGNMENT (template_parameter_argument | variable) {pin=2}
template_parameter_id ::= TEMPLATE_PARAMETER_NAME
template_parameter_argument ::= TEMPLATE_ARGUMENT_VALUE

bdd_statement ::= (
        GIVEN eol_based_keyword_call WHEN eol_based_keyword_call
        | GIVEN eol_based_keyword_call
        | WHEN eol_based_keyword_call
    )
    THEN eol_based_keyword_call (AND eol_based_keyword_call)* (BUT eol_based_keyword_call)*

user_keyword_statement ::= user_keyword_statement_id eol_marker (local_setting | executable_statement)* {
    pin=1
    implements = [
        "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.RobotQualifiedNameOwner"
        "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.RobotUserKeywordStatementExpression"
        "com.intellij.psi.PsiNameIdentifierOwner"
        "com.intellij.navigation.NavigationItem"
    ]
    mixin = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotUserKeywordExtension"
    stubClass = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotUserKeywordStub"
    elementTypeFactory = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotUserKeywordStubElement.create"
    methods = [nameIdentifier="user_keyword_statement_id" getName getQualifiedName]
    recoverWhile=user_keyword_statement_recover
}
user_keyword_statement_id ::= USER_KEYWORD_NAME
private user_keyword_statement_recover ::= !user_keyword_statement_id & section_recover

local_setting ::= local_setting_id (local_setting_argument | positional_argument | parameter | eol_free_keyword_call | ASSIGNMENT)* eol_marker {methods=[getSettingName]}
local_setting_id ::= LOCAL_SETTING_NAME
local_setting_argument ::= variable ASSIGNMENT positional_argument

executable_statement ::= loop_structure | loop_control_structure | control_structure | call_structure | return_structure

fake block_opening_structure ::= loop_structure | control_structure
private control_structure ::= if_structure | try_structure | group_structure {
    implements = "block_opening_structure"
}
private loop_structure ::= for_loop_structure | while_loop_structure {
    implements = "block_opening_structure"
}
private call_structure ::= eol_based_keyword_call | inline_variable_statement | keyword_variable_statement | single_variable_statement
private loop_control_structure ::= (BREAK | CONTINUE) eol_marker?
private return_structure ::= RETURN positional_argument* eol_marker? {pin=1}

for_loop_structure ::= FOR variable+ FOR_IN positional_argument+ parameter* eol_marker executable_statement* END eol_marker {pin=1}
while_loop_structure ::= WHILE positional_argument+ eol_marker (parameter+ eol_marker)? executable_statement* END eol_marker {pin=1}
if_structure ::= IF positional_argument+ eol_marker? executable_statement*
    (ELSE_IF positional_argument+ eol_marker? executable_statement*)*
    (ELSE eol_marker? executable_statement*)?
    (END eol_marker)? {pin=1}
try_structure ::= TRY eol_marker executable_statement+
    (EXCEPT (positional_argument | parameter*)? eol_marker executable_statement*)*
    (ELSE eol_marker executable_statement*)?
    (FINALLY executable_statement*)?
    END eol_marker {pin=1}
group_structure ::= GROUP positional_argument? eol_marker executable_statement* END eol_marker {pin=1}

fake keyword_call ::= base_keyword_call {
    implements = [
        "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.RobotQualifiedNameOwner"
        "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.RobotKeywordCallExpression"
        "com.intellij.navigation.NavigationItem"
    ]
    methods = [getName getSimpleKeywordName]
    mixin = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotKeywordCallExtension"
    stubClass = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotKeywordCallStub"
    elementTypeFactory = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotKeywordCallStubElement.create"
}
eol_based_keyword_call ::= base_keyword_call eol_marker? {elementType=keyword_call}
eol_free_keyword_call ::= base_keyword_call {elementType=keyword_call}
private base_keyword_call ::= keyword_call_name (parameter | positional_argument | ASSIGNMENT)* {pin=1}
keyword_call_name ::= keyword_call_library? KEYWORD_NAME { methods = [getName getReference] }
keyword_call_library ::= keyword_call_library_name KEYWORD_LIBRARY_SEPARATOR
keyword_call_library_name ::= KEYWORD_LIBRARY_NAME {methods = [getReference]}

fake argument ::= DUMMY // This is a placeholder for the argument type, which is used to represent both parameters and positional arguments in the grammar.
parameter ::= parameter_id ASSIGNMENT positional_argument? {methods=[getParameterName]}
parameter_id ::= PARAMETER_NAME {methods = [getReference]}

fake variable_statement ::= DUMMY {methods = [getIcon]}
inline_variable_statement ::= VAR variable_definition ASSIGNMENT? variable_value+ eol_marker?
single_variable_statement ::= variable_definition ASSIGNMENT? variable_value* eol_marker?
keyword_variable_statement ::= variable_definition+ ASSIGNMENT? eol_based_keyword_call // Without EOL as it is handled at a lower level
variable_value ::= variable | positional_argument | parameter

positional_argument ::= external_positional_argument {
    mixin = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotPositionalArgumentExtension"
    stubClass = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotPositionalArgumentStub"
    elementTypeFactory = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotPositionalArgumentStubElement.create"
    methods = [getReference]
}
external external_positional_argument ::= parsePositionalArgument positional_argument_content
private positional_argument_content ::= literal_constant_value | variable

variable_definition ::= variable {
    implements = [
        "com.intellij.psi.PsiNameIdentifierOwner"
        "com.intellij.navigation.NavigationItem"
        "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.DefinedVariable"
        "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.RobotQualifiedNameOwner"
    ]
    mixin = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotVariableDefinitionExtension"
    stubClass = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotVariableDefinitionStub"
    elementTypeFactory = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotVariableDefinitionStubElement.create"
    methods = [getNameIdentifier getName getIcon getQualifiedName]
}

variable ::= scalar_variable | list_variable | dict_variable | environment_variable {
    methods = [getVariableName]
}
scalar_variable ::= SCALAR_VARIABLE_START (variable_content | python_expression) VARIABLE_END (extended_variable_key_access | extended_variable_slice_access | extended_variable_index_access | extended_variable_nested_access)* {
    mixin = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotScalarVariableExtension"
    stubClass = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotScalarVariableStub"
    elementTypeFactory = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotScalarVariableStubElement.create"
}
list_variable ::= LIST_VARIABLE_START (variable_content | python_expression) VARIABLE_END (extended_variable_slice_access | extended_variable_index_access | extended_variable_nested_access)* {
    mixin = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotListVariableExtension"
    stubClass = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotListVariableStub"
    elementTypeFactory = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotListVariableStubElement.create"
}
dict_variable ::= DICT_VARIABLE_START (variable_content | python_expression) VARIABLE_END (extended_variable_key_access | extended_variable_nested_access)* {
    mixin = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotDictVariableExtension"
    stubClass = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotDictVariableStub"
    elementTypeFactory = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.stub.RobotDictVariableStubElement.create"
}
environment_variable ::= ENV_VARIABLE_START variable_content VARIABLE_END

variable_content ::= (variable | variable_body_id | VARIABLE_BODY_EXTENSION | extended_variable_nested_access)+ {
    methods=[content="/variable_body_id[0]"]
}
variable_body_id ::= VARIABLE_BODY {
    methods = [getReference]
}
python_expression ::= PYTHON_EXPRESSION_START PYTHON_EXPRESSION_CONTENT PYTHON_EXPRESSION_END { methods = [expressionContent="PYTHON_EXPRESSION_CONTENT"] }

extended_variable_slice_access ::= VARIABLE_SLICE_ACCESS
extended_variable_index_access ::= VARIABLE_INDEX_ACCESS
extended_variable_key_access ::= VARIABLE_KEY_ACCESS
extended_variable_nested_access ::= VARIABLE_ACCESS_START (variable | literal_constant_value | variable_body_id | VARIABLE_BODY_EXTENSION)+ VARIABLE_ACCESS_END

literal_constant_value ::= LITERAL_CONSTANT

private eol_marker ::= EOL+ | <<eof>>
