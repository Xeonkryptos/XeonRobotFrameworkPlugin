{
  parserClass="dev.xeonkryptos.xeonrobotframeworkplugin.psi.RobotParser"
  parserUtilClass="dev.xeonkryptos.xeonrobotframeworkplugin.psi.RobotParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Robot"
  psiImplClassSuffix="Impl"
  psiPackage="dev.xeonkryptos.xeonrobotframeworkplugin.psi.element"
  psiImplPackage="dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl"

  elementTypeHolderClass="dev.xeonkryptos.xeonrobotframeworkplugin.psi.RobotTypes"
  elementTypeClass="dev.xeonkryptos.xeonrobotframeworkplugin.psi.RobotElementType"
  tokenTypeClass="dev.xeonkryptos.xeonrobotframeworkplugin.psi.RobotTokenType"

  implements(".*_id")="com.intellij.psi.PsiNamedElement"

  name(".*section")="Section"
  extends(".*_section")="section"

  extends(".*_variable")="variable"

  extends(".*_variable_statement")="variable_statement"

  implements(".*_keyword_call")="com.intellij.psi.PsiNameIdentifierOwner"
  extends(".*_keyword_call")="keyword_call"

  extends(".*")="dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotPsiElementBase"
}

root ::= !<<eof>> file2

file2 ::= language* section*

language ::= LANGUAGE_KEYWORD line_comment* language_id line_comment* {
    pin=1
    implements = "com.intellij.psi.PsiNameIdentifierOwner"
    extends = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotLanguageExtension"
}
language_id ::= LANGUAGE_NAME

section ::= settings_section
    | variables_section
    | test_cases_section
    | tasks_section
    | keywords_section
    | comments_section

settings_section ::= SETTINGS_HEADER setting_statements* {pin=1 recoverWhile=section_recover}
variables_section ::= VARIABLES_HEADER single_variable_statement* {pin=1 recoverWhile=section_recover}
test_cases_section ::= TEST_CASES_HEADER test_case_statement* {pin=1 recoverWhile=section_recover}
tasks_section ::= TASKS_HEADER task_statement* {pin=1 recoverWhile=section_recover}
keywords_section ::= USER_KEYWORDS_HEADER user_keyword_statement* {pin=1 recoverWhile=section_recover}
comments_section ::= COMMENTS_HEADER COMMENT* {pin=1 recoverWhile=section_recover}
private section_recover ::= !(SETTINGS_HEADER | VARIABLES_HEADER | TEST_CASES_HEADER | TASKS_HEADER | USER_KEYWORDS_HEADER | COMMENTS_HEADER)

private setting_statements ::= library_import
    | resource_import
    | variables_import
    | metadata_statement
    | documentation_statement
    | suite_name_statement
    | setup_teardown_statements
    | tags_statement
    | template_statements
    | timeout_statements
    | unknown_setting_statements

library_import ::= LIBRARY_IMPORT_KEYWORD line_comment* argument (parameter | argument)* (WITH_NAME_KEYWORD new_library_name)? line_comment* EOL {pin=1}
new_library_name ::= ARGUMENT_VALUE

resource_import ::= RESOURCE_IMPORT_KEYWORD line_comment* argument line_comment* EOL {pin=1}

variables_import ::= VARIABLES_IMPORT_KEYWORD line_comment* argument (parameter | argument)* line_comment* EOL {pin=1}

suite_name_statement ::= SUITE_NAME_KEYWORD line_comment* argument line_comment* EOL {pin=1}

documentation_statement ::= DOCUMENTATION_KEYWORD line_comment* argument+ line_comment* EOL {pin=1}

metadata_statement ::= METADATA_KEYWORD line_comment* argument+ line_comment* EOL {pin=1}

setup_teardown_statements ::= SETUP_TEARDOWN_STATEMENT_KEYWORDS line_comment* (eol_based_keyword_call | variable) line_comment* {pin=1}

tags_statement ::= TAGS_KEYWORDS line_comment* argument+ line_comment* EOL {pin=1}

template_statements ::= TEMPLATE_KEYWORDS line_comment* eol_based_keyword_call line_comment* {pin=1}

timeout_statements ::= TIMEOUT_KEYWORDS line_comment* argument line_comment* EOL {pin=1}

unknown_setting_statements ::= unknown_setting_statement_id (parameter | argument | line_comment)* EOL {
    pin=1
    implements = "com.intellij.psi.PsiNameIdentifierOwner"
    extends = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotUnknownSettingStatementExtension"
}
unknown_setting_statement_id ::= UNKNOWN_SETTING_KEYWORD

test_case_statement ::= test_case_id (testcase_task_statement)* {
    pin=1
    implements = "com.intellij.psi.PsiNameIdentifierOwner"
    extends = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotTestCaseExtension"
    recoverWhile=test_case_statement_recover
}
test_case_id ::= TEST_CASE_NAME
private test_case_statement_recover ::= !test_case_id & section_recover
task_statement ::= task_id (testcase_task_statement)* {
    pin=1
    implements = "com.intellij.psi.PsiNameIdentifierOwner"
    extends = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotTaskExtension"
    recoverWhile=task_statement_recover
}
task_id ::= TASK_NAME
private task_statement_recover ::= !task_id & section_recover

private testcase_task_statement ::= local_setting
    | bdd_statement
    | testcase_task_statement_free_style
    | testcase_task_statement_template_style
    | line_comment
private testcase_task_statement_free_style ::= inline_variable_statement | keyword_variable_statement | eol_based_keyword_call
private testcase_task_statement_template_style ::= template_arguments

template_arguments ::= (template_argument | template_parameter | variable)+ EOL
template_argument ::= TEMPLATE_ARGUMENT_VALUE
template_parameter ::= template_parameter_id ASSIGNMENT (template_parameter_argument | variable) {
    pin=2
    implements = "com.intellij.psi.PsiNameIdentifierOwner"
    extends = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotTemplateParameterExtension"
}
template_parameter_id ::= TEMPLATE_PARAMETER_NAME
template_parameter_argument ::= TEMPLATE_ARGUMENT_VALUE

bdd_statement ::= (
        GIVEN eol_based_keyword_call WHEN eol_based_keyword_call
        | GIVEN eol_based_keyword_call
        | WHEN eol_based_keyword_call
    )
    THEN eol_based_keyword_call (AND eol_based_keyword_call)* (BUT eol_based_keyword_call)*

user_keyword_statement ::= user_keyword_statement_id line_comment* (local_setting | eol_based_keyword_call | line_comment)* user_keyword_return_statement? line_comment? {
    pin=1
    implements = "com.intellij.psi.PsiNameIdentifierOwner"
    extends = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotUserKeywordExtension"
    recoverWhile=user_keyword_statement_recover
}
user_keyword_statement_id ::= USER_KEYWORD_NAME
private user_keyword_statement_recover ::= !user_keyword_statement_id & section_recover

private user_keyword_return_statement ::= RETURN value* EOL {pin=1}

local_setting ::= local_setting_id line_comment* (parameter | argument | eol_free_keyword_call)* line_comment* EOL {
    pin=1
    implements = "com.intellij.psi.PsiNameIdentifierOwner"
    extends = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotLocalSettingExtension"
}
local_setting_id ::= LOCAL_SETTING_NAME

fake keyword_call ::= base_keyword_call {
    implements = "com.intellij.psi.PsiNameIdentifierOwner"
    extends = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotKeywordCallExtension"
}
eol_based_keyword_call ::= base_keyword_call EOL
eol_free_keyword_call ::= base_keyword_call
private base_keyword_call ::= keyword_call_id (parameter | argument | line_comment)* {pin=1}
keyword_call_id ::= KEYWORD_NAME

parameter ::= parameter_id ASSIGNMENT argument {
    pin=2
    implements = "com.intellij.psi.PsiNameIdentifierOwner"
    extends = "dev.xeonkryptos.xeonrobotframeworkplugin.psi.element.impl.RobotParameterExtension"
}
parameter_id ::= PARAMETER_NAME

fake variable_statement ::= inline_variable_statement | single_variable_statement | keyword_variable_statement?
inline_variable_statement ::= VAR single_variable_statement {pin=1}
single_variable_statement ::= variable ASSIGNMENT? variable_value* line_comment* EOL
keyword_variable_statement ::= variable+ ASSIGNMENT? eol_based_keyword_call line_comment* // Without EOL as it is handled at a higher level
variable ::= scalar_variable | list_variable | dict_variable | environment_variable
variable_value ::= value+

argument ::= value

scalar_variable ::= SCALAR_VARIABLE_START (variable_id | python_expression) VARIABLE_END (extended_variable_slice_access | extended_variable_index_access | extended_variable_nested_access)*
list_variable ::= LIST_VARIABLE_START (variable_id | python_expression) VARIABLE_END (extended_variable_slice_access | extended_variable_index_access | extended_variable_nested_access)*
dict_variable ::= DICT_VARIABLE_START (variable_id | python_expression) VARIABLE_END (extended_variable_key_access | extended_variable_nested_access)*
environment_variable ::= ENV_VARIABLE_START variable_id VARIABLE_END

variable_id ::= value
python_expression ::= PYTHON_EXPRESSION_START python_expression_body PYTHON_EXPRESSION_END
python_expression_body ::= PYTHON_EXPRESSION_CONTENT

extended_variable_slice_access ::= VARIABLE_SLICE_ACCESS
extended_variable_index_access ::= VARIABLE_INDEX_ACCESS
extended_variable_key_access ::= VARIABLE_KEY_ACCESS
extended_variable_nested_access ::= VARIABLE_ACCESS_START value VARIABLE_ACCESS_END

private value ::= scalar_variable
        | list_variable
        | dict_variable
        | environment_variable
        | constant_value
constant_value ::= ARGUMENT_VALUE

private line_comment ::= COMMENT
