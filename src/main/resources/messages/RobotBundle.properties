color.settings.argument=Argument
color.settings.parameter=Parameter
color.settings.bracketSetting=Bracket setting
color.settings.comment=Comment
color.settings.error=Error
color.settings.gherkin=Gherkin
color.settings.syntaxMarker=SyntaxMarker
color.settings.heading=Heading
color.settings.import=Import
color.settings.keyword=Keyword
color.settings.keywordDefinition=Keyword definition
color.settings.setting=Setting
color.settings.variable=Variable
color.settings.variableDefinition=Variable definition

# Settings
options.entrypoint=Robot Options
options.inspection.custom.arguments.tooltip=Add custom arguments to the live python inspection to detect its execution and stop automatic code execution \
  on import if necessary
options.inspection.decorators.tooltip=Restrict live python inspection to specific decorators only, because those are manipulating arguments for example \
  (can contain the @ or just the name of the decorators, separated by comma)

# Structure
action.structureView.show.files=Show Files
action.structureView.show.headings=Show Headings
action.structureView.show.settings=Show Settings
action.structureView.show.testCases=Show Test Cases
action.structureView.show.keywords=Show Keywords
action.structureView.show.variables=Show Variables
action.structureView.sort.type=Sort By Type
action.name.dryrun=Execute with Dry-run

# Find Usages
usage.declaration=Declaration
usage.descriptive.argument=argument
usage.descriptive.import=resource
usage.descriptive.keyword=keyword
usage.descriptive.variable=variable
usage.descriptive.parameter=parameter
usage.type.keyword=Keyword call

# Run Configuration
run.with.dryrun=Run '%s' with dry-run
run.with.dryrun.mnemonic=Run '%s' with dry-run
run.selected.configuration.with.dryrun.enabled=Run selected configuration with dry-run

# Annotations
annotation.user-keyword.settings.argument.defined-more-than-once=Only one [Arguments] setting is allowed per user keyword
annotation.user-keyword.settings.argument.keyword-only-marker-more-than-once=Only one keyword-only marker based on ${} is allowed
annotation.user-keyword.settings.argument.variable-defined-after-keyword-only-marker=After ${} only arguments with default values are allowed
annotation.keyword.parameter.value.not-found=Parameter value not found
annotation.keyword.not-found=Keyword not found
annotation.keyword.parameters.missing=Missing mandatory parameters: {0}
annotation.keyword.positional-arguments.keyword-only.misplaced=A parameter name was expected, but a positional argument was found
annotation.import.not-found=Import file not found
annotation.variable.not-found=Variable definition not found
annotation.variable.reassigned=Variable definition reassigned

# Intentions
intention.family.remove.name.unused=Remove unused
intention.family.remove.text.unused-variable=Remove unused variable definition
intention.family.remove.text.unused-keyword-only-marker=Remove unnecessary keyword-only marker from [Arguments] setting
intention.family.remove.name.illegal-arguments-setting=Remove illegal [Arguments] setting
intention.family.remove.text.illegal-arguments-setting=Remove illegal [Arguments] setting from user keyword
intention.family.remove.name.illegal-arguments-setting.keyword-only-markers=Remove illegal ${} marker
intention.family.remove.text.illegal-arguments-setting.keyword-only-markers=Remove illegal ${} marker from [Arguments] setting

# Inspections
# Inspection Groups
INSP.GROUP.complexity=Complexity
INSP.GROUP.readability=Readability
INSP.GROUP.compilation=Compilation
INSP.GROUP.cleanup=Clean up
# RobotImportNotUsed
INSP.NAME.import.unused=Import not used
INSP.import.unused=Unused import statement
INSP.NAME.variable.unused=Unused variable
INSP.variable.unused=Unused variable definition
INSP.NAME.keyword-only-marker.unused=Not needed keyword-only marker
INSP.keyword-only-marker.unused=Keyword-only marker in [Arguments] setting not needed
# RobotNestedVariable
INSP.NAME.variable.nested=Nested variable
INSP.variable.nested=Usage of a nested variable
# RobotNestedVariableDefinition

