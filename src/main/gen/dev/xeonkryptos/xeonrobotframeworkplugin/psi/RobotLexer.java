// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: RobotLexer.flex

package dev.xeonkryptos.xeonrobotframeworkplugin.psi;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.xeonkryptos.xeonrobotframeworkplugin.psi.RobotTypes.*;


public class RobotLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\17\u0200\1\u0500"+
    "\247\u0200\10\u0600\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\2\0\1\13"+
    "\3\0\1\14\1\0\12\15\3\0\1\16\2\0\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\15\1\26"+
    "\1\27\1\15\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\15\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\15\1\46\1\47\1\50\1\0\1\51\1\0"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\15\1\72\1\73\1\74\1\75\1\76\1\77\1\15"+
    "\1\100\1\15\1\101\1\102\1\103\7\0\1\3\32\0"+
    "\1\104\43\0\1\105\25\0\1\106\6\0\1\107\2\0"+
    "\1\110\4\0\1\111\3\0\1\112\5\0\1\113\2\0"+
    "\1\114\5\0\1\115\20\0\1\116\15\0\1\117\75\0"+
    "\1\120\u0226\0\1\104\177\0\13\104\35\0\2\3\5\0"+
    "\1\104\57\0\1\104\240\0\1\104\377\0\u0100\121";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\4\3\1\2\1\4\1\1\1\2\1\1"+
    "\1\2\1\5\1\6\1\7\1\10\1\1\21\7\1\11"+
    "\1\12\2\7\1\13\1\14\1\15\1\2\1\1\1\16"+
    "\1\1\1\0\1\17\1\2\1\20\1\21\1\22\1\1"+
    "\1\0\2\2\1\23\16\7\1\24\1\25\27\7\1\2"+
    "\1\17\1\1\1\17\1\0\1\1\1\0\1\17\1\26"+
    "\12\7\1\27\3\7\1\30\2\7\1\2\13\7\1\31"+
    "\5\7\1\32\3\7\1\33\1\2\2\17\5\7\1\16"+
    "\5\7\1\34\5\7\1\2\3\7\1\16\11\7\1\35"+
    "\5\7\1\2\3\7\1\36\1\7\1\16\5\7\1\16"+
    "\5\7\1\2\3\7\1\16\4\7\1\2\1\7\1\2"+
    "\2\7\1\35\1\2\1\16\3\7\1\16\1\7\1\37"+
    "\1\35\4\7\1\16\1\7\1\16\3\7\1\16\1\40"+
    "\4\7\1\2\3\7\1\16\4\7\1\2\1\41\1\2"+
    "\1\7\1\2\1\16\1\2\2\7\1\16\5\7\1\16"+
    "\1\7\1\16\1\7\1\42\1\7\1\43\1\7\1\44"+
    "\1\45\1\7\2\2\1\7\1\46\1\16\1\7\1\47"+
    "\2\7\2\2\1\50\1\2\1\16\1\2\2\7\1\16"+
    "\5\7\1\16\1\51\1\16\1\7\1\42\2\7\1\45"+
    "\2\2\2\7\1\47\3\7\1\52\1\2\1\50\1\16"+
    "\1\2\2\7\1\16\1\52\3\7\1\16\3\7\1\2"+
    "\1\42\1\7\1\52\1\50\1\16\1\2\2\53\1\7"+
    "\1\2\2\16\3\7\1\2\1\16\1\2\1\53\1\7"+
    "\1\2\2\16\2\7\1\2\1\16\1\2\1\7\1\2"+
    "\2\16\1\2\1\7\1\2\1\16\1\2\1\7\1\2"+
    "\2\16\1\45\1\16\1\2\1\7\1\2\1\45\1\16"+
    "\1\2\1\53\3\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[386];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\122\0\u042a\0\122"+
    "\0\u047c\0\u04ce\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba"+
    "\0\u070c\0\u075e\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a"+
    "\0\u099c\0\u09ee\0\122\0\122\0\u0a40\0\u0a92\0\122\0\122"+
    "\0\122\0\u0ae4\0\u023e\0\u0b36\0\u0b88\0\u0bda\0\122\0\u0c2c"+
    "\0\u023e\0\122\0\u023e\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u023e"+
    "\0\u0dc6\0\u0e18\0\u0e6a\0\u0ebc\0\u0f0e\0\u0f60\0\u0fb2\0\u1004"+
    "\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0\0\u042a\0\u042a"+
    "\0\u1242\0\u1294\0\u12e6\0\u1338\0\u138a\0\u13dc\0\u142e\0\u1480"+
    "\0\u14d2\0\u1524\0\u1576\0\u15c8\0\u161a\0\u166c\0\u16be\0\u1710"+
    "\0\u1762\0\u17b4\0\u1806\0\u1858\0\u18aa\0\u18fc\0\u194e\0\u19a0"+
    "\0\u023e\0\u19f2\0\u1a44\0\u1a96\0\u1ae8\0\u1b3a\0\u0386\0\122"+
    "\0\u1b8c\0\u1bde\0\u1c30\0\u1c82\0\u1cd4\0\u1d26\0\u1d78\0\u1dca"+
    "\0\u1e1c\0\u1e6e\0\u042a\0\u1ec0\0\u1f12\0\u1f64\0\u042a\0\u1fb6"+
    "\0\u2008\0\u205a\0\u20ac\0\u20fe\0\u2150\0\u21a2\0\u21f4\0\u2246"+
    "\0\u2298\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u042a\0\u2432\0\u2484"+
    "\0\u24d6\0\u2528\0\u257a\0\u042a\0\u25cc\0\u261e\0\u2670\0\u042a"+
    "\0\u26c2\0\u0c7e\0\u0cd0\0\u2714\0\u2766\0\u27b8\0\u280a\0\u285c"+
    "\0\u28ae\0\u2900\0\u2952\0\u29a4\0\u29f6\0\u2a48\0\u2a9a\0\u2aec"+
    "\0\u2b3e\0\u2b90\0\u2be2\0\u2c34\0\u2c86\0\u2cd8\0\u2d2a\0\u2d7c"+
    "\0\u2dce\0\u2e20\0\u2e72\0\u2ec4\0\u2f16\0\u2f68\0\u2fba\0\u300c"+
    "\0\u305e\0\u30b0\0\u3102\0\u3154\0\u31a6\0\u31f8\0\u324a\0\u329c"+
    "\0\u32ee\0\u3340\0\u3392\0\u33e4\0\u042a\0\u3436\0\u3488\0\u34da"+
    "\0\u352c\0\u357e\0\u35d0\0\u3622\0\u3674\0\u36c6\0\u3718\0\u376a"+
    "\0\u37bc\0\u380e\0\u3860\0\u38b2\0\u3904\0\u3956\0\u39a8\0\u39fa"+
    "\0\u3a4c\0\u3a9e\0\u3af0\0\u3b42\0\u3b94\0\u3be6\0\u3c38\0\u3102"+
    "\0\u042a\0\u3c8a\0\u3cdc\0\u3d2e\0\u3d80\0\u3dd2\0\u3e24\0\u3e76"+
    "\0\u042a\0\122\0\u3ec8\0\u3f1a\0\u3f6c\0\u3fbe\0\u4010\0\u4062"+
    "\0\u40b4\0\u4106\0\u4158\0\u41aa\0\u41fc\0\u042a\0\u424e\0\u42a0"+
    "\0\u42f2\0\u4344\0\u4396\0\u43e8\0\u443a\0\u448c\0\u44de\0\u4530"+
    "\0\u4582\0\u45d4\0\u4626\0\u4678\0\u042a\0\u46ca\0\u471c\0\u476e"+
    "\0\u47c0\0\u4812\0\u4864\0\u48b6\0\u4908\0\u495a\0\u49ac\0\u49fe"+
    "\0\u4a50\0\u4aa2\0\u4af4\0\u4b46\0\u4b98\0\u4bea\0\u4c3c\0\u4c8e"+
    "\0\u0b36\0\u4ce0\0\u042a\0\u4d32\0\u4d84\0\u4dd6\0\u4e28\0\u4e7a"+
    "\0\u042a\0\u4ecc\0\u4f1e\0\122\0\u4f70\0\u4fc2\0\u5014\0\u5066"+
    "\0\u50b8\0\u510a\0\u515c\0\u51ae\0\u5200\0\u5252\0\u52a4\0\u52f6"+
    "\0\u5348\0\u539a\0\u53ec\0\u543e\0\u5490\0\u042a\0\u54e2\0\u5534"+
    "\0\u042a\0\u5586\0\u55d8\0\u042a\0\u562a\0\u567c\0\u56ce\0\u5720"+
    "\0\u0b36\0\u5772\0\u57c4\0\u5816\0\122\0\u5868\0\u042a\0\u58ba"+
    "\0\u590c\0\u595e\0\u59b0\0\u5a02\0\u5a54\0\u5aa6\0\u5af8\0\u5b4a"+
    "\0\u5b9c\0\u5bee\0\u5c40\0\u5c92\0\u5ce4\0\122\0\u5d36\0\u042a"+
    "\0\122\0\u5d88\0\u5dda\0\u5e2c\0\122\0\u5e7e\0\u5ed0\0\u5f22"+
    "\0\u5f74\0\u4c3c\0\u5fc6\0\u6018\0\u606a\0\u60bc\0\u610e\0\u0b36"+
    "\0\u6160\0\u61b2\0\u6204\0\u6256\0\u62a8\0\u62fa\0\u634c\0\u639e"+
    "\0\u63f0\0\u6442\0\u6494\0\u64e6\0\u6538\0\u658a\0\u65dc\0\u662e"+
    "\0\u6680\0\u66d2\0\u6724\0\u6776\0\u67c8\0\u681a\0\122\0\u686c"+
    "\0\u68be\0\u6910\0\u6962\0\u0b36\0\u69b4\0\u6a06\0\u042a\0\u6a58"+
    "\0\u6aaa\0\u6afc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[386];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\17\1\25\1\26\1\17\1\27"+
    "\1\30\1\31\1\32\1\33\1\17\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\2\17\1\43\1\2\1\44"+
    "\1\45\1\46\26\17\1\47\1\50\1\51\1\5\1\2"+
    "\1\52\14\2\1\53\1\0\117\2\1\53\1\3\1\4"+
    "\2\3\77\53\1\3\15\53\1\0\4\4\77\0\1\4"+
    "\15\0\1\2\1\3\1\4\2\5\77\2\1\5\16\2"+
    "\1\3\1\4\1\5\1\6\10\2\1\54\2\2\26\54"+
    "\4\2\27\54\3\2\1\5\15\2\1\7\1\55\1\56"+
    "\2\7\1\57\41\7\1\60\52\7\2\53\1\0\121\53"+
    "\1\0\76\53\1\61\20\53\1\2\1\53\1\0\76\2"+
    "\1\62\20\2\2\53\1\0\76\53\1\63\20\53\1\14"+
    "\1\64\1\65\7\14\1\57\34\14\1\66\52\14\1\2"+
    "\1\53\1\0\10\2\1\67\107\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\27\17"+
    "\21\2\2\53\1\0\76\53\1\70\20\53\1\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\21\17\1\71\1\17\1\72\1\73\2\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\16\17"+
    "\1\74\7\17\3\2\1\45\10\17\1\75\16\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\14\17"+
    "\1\76\11\17\3\2\1\45\1\77\15\17\1\100\10\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\11\17\1\101\1\17\1\102\10\17\1\103\1\17\3\2"+
    "\1\45\10\17\1\104\16\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\7\17\1\105\4\17\1\106"+
    "\11\17\3\2\1\45\27\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\5\17\1\107\5\17\1\110"+
    "\12\17\3\2\1\45\27\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\4\17"+
    "\1\111\3\17\1\112\2\17\1\113\2\17\1\114\10\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\10\17\1\115\16\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\7\17\1\116"+
    "\16\17\3\2\1\45\23\17\1\117\3\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\7\17\1\120"+
    "\16\17\3\2\1\45\1\121\26\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\1\122\17\17\1\123\6\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\4\17\1\124\21\17\3\2"+
    "\1\45\27\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\2\17\1\125\1\17"+
    "\1\126\22\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\16\17\1\127\7\17\3\2\1\45\1\130"+
    "\3\17\1\131\22\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\21\17\1\132"+
    "\5\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\1\133\25\17\3\2\1\45\1\134\26\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\6\17"+
    "\1\135\1\136\16\17\3\2\1\45\27\17\22\2\1\53"+
    "\1\0\12\2\1\45\2\2\26\45\3\2\30\45\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\20\17\1\137\6\17\22\2\1\53\1\0"+
    "\61\2\1\140\36\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\54\2\2\26\54\4\2\27\54\21\2\2\55\1\56"+
    "\2\55\1\141\41\55\1\142\52\55\5\56\1\143\41\56"+
    "\1\144\52\56\1\7\1\55\1\0\1\2\115\7\1\2"+
    "\2\64\1\65\7\64\1\141\34\64\1\145\52\64\12\65"+
    "\1\143\34\65\1\146\52\65\1\14\1\64\1\65\7\14"+
    "\1\147\34\14\1\66\52\14\1\2\1\53\1\0\10\2"+
    "\1\150\107\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\4\17\1\151\22\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\5\17\1\152\21\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\1\153\26\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\4\17\1\154\21\17\3\2\1\45\27\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\1\17\1\155\25\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\13\17\1\156"+
    "\12\17\3\2\1\45\27\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\21\17"+
    "\1\157\5\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\14\17\1\160\1\161"+
    "\11\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\17\17\1\162\6\17\3\2\1\45\27\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\3\17"+
    "\1\163\22\17\3\2\1\45\27\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\2\17\1\164\23\17"+
    "\3\2\1\45\27\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\15\17\1\165"+
    "\11\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\13\17\1\166\12\17\3\2\1\45\27\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\16\17"+
    "\1\167\7\17\3\2\1\45\27\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\26\17\1\170\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\20\17\1\171\6\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\27\17\11\2\1\172\10\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\14\17\1\173\12\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\1\17"+
    "\1\174\25\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\20\17\1\175\5\17\3\2\1\45\27\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\23\17\1\176\3\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\12\17\1\177"+
    "\13\17\3\2\1\45\27\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\21\17"+
    "\1\200\5\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\13\17\1\201\13\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\16\17\1\202\10\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\20\17\1\203"+
    "\5\17\3\2\1\45\27\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\7\17"+
    "\1\204\17\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\22\17\1\205\4\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\25\17\1\206\3\2\1\45\27\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\20\17\1\207\1\210\5\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\7\17"+
    "\1\211\11\17\1\212\5\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\4\17"+
    "\1\213\22\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\16\17\1\214\7\17\3\2\1\45\27\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\20\17\1\215\6\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\7\17\1\216"+
    "\16\17\3\2\1\45\27\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\20\17\1\217\5\17\3\2"+
    "\1\45\27\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\6\17\1\220\20\17"+
    "\22\2\1\53\1\0\65\2\1\221\31\2\2\55\1\0"+
    "\1\53\115\55\1\53\122\0\2\56\2\0\115\56\1\0"+
    "\2\64\1\65\7\64\1\222\34\64\1\145\52\64\12\65"+
    "\1\223\34\65\1\146\52\65\1\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\22\17"+
    "\1\224\4\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\6\17\1\225\20\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\10\17\1\226\16\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\1\227\25\17"+
    "\3\2\1\45\27\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\13\17\1\230"+
    "\13\17\22\2\1\53\1\0\1\2\1\231\10\2\1\17"+
    "\2\2\20\17\1\232\5\17\3\2\1\45\27\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\16\17\1\233\10\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\4\17\1\234\7\17\1\235\12\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\5\17\1\236\21\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\4\17\1\237\21\17\3\2\1\45"+
    "\27\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\4\17\1\240\21\17\3\2\1\45\27\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\21\17\1\241\5\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\1\242\25\17\3\2"+
    "\1\45\27\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\25\17\1\243\1\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\11\17\1\244\15\17\22\2\1\53"+
    "\1\0\113\2\1\245\4\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\4\17\1\246"+
    "\7\17\1\247\12\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\20\17\1\250"+
    "\6\17\22\2\1\53\1\0\1\2\1\251\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\27\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\22\17\1\252\4\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\4\17\1\253\21\17\3\2\1\45"+
    "\27\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\22\17\1\254\4\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\1\255\26\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\14\17"+
    "\1\256\12\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\21\17\1\257\4\17\3\2\1\45\27\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\13\17\1\260\13\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\22\17\1\261\4\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\4\17"+
    "\1\262\22\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\12\17\1\263\14\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\22\17\1\264\4\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\22\17\1\265\4\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\20\17"+
    "\1\266\6\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\10\17\1\267\16\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\11\17\1\270\14\17\3\2\1\45\27\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\6\17\1\175"+
    "\17\17\3\2\1\45\27\17\22\2\1\53\1\0\62\2"+
    "\1\271\35\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\23\17\1\272\3\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\1\273\26\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\15\17"+
    "\1\274\11\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\10\17\1\275\15\17\3\2\1\45\27\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\10\17\1\276\16\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\54\2\2\13\54\1\277"+
    "\12\54\4\2\27\54\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\7\17\1\300\16\17\3\2\1\45"+
    "\27\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\21\17\1\301\5\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\15\17\1\302\11\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\4\17\1\303\22\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\10\17\1\304"+
    "\16\17\22\2\1\53\1\0\1\2\1\305\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\27\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\15\17\1\306\10\17"+
    "\3\2\1\45\27\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\22\17\1\307"+
    "\4\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\11\17\1\310\14\17\3\2\1\45\27\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\16\17\1\311\10\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\1\312\26\17\22\2\1\53\1\0\65\2\1\313\32\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\15\17\1\314\11\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\4\17\1\315\22\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\1\316\26\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\54\2\2"+
    "\13\54\1\317\12\54\4\2\27\54\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\22\17\1\320\4\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\11\17\1\321\14\17\3\2\1\45"+
    "\27\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\1\322\26\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\1\17\1\323\25\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\27\17"+
    "\16\2\1\324\3\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\16\17\1\325\7\17\3\2\1\45\27\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\27\17\14\2\1\326\5\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\10\17\1\327\16\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\1\330"+
    "\26\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\21\17\1\331\5\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\27\17\7\2\1\332\12\2\1\53\1\0"+
    "\1\2\1\333\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\5\17\1\334\2\17\1\335\5\17\1\336\10\17\22\2"+
    "\1\53\1\0\1\2\1\337\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\27\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\1\340\26\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\4\17\1\341\21\17\3\2\1\45\27\17\22\2\1\53"+
    "\1\0\75\2\1\342\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\12\17\1\343"+
    "\14\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\1\17\1\344\25\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\21\17\1\345\5\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\16\17\1\346\10\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\54\2\2\14\54\1\347\11\54\4\2\27\54"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\13\17\1\350\12\17\3\2\1\45\27\17\22\2\1\53"+
    "\1\0\1\2\1\351\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\27\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\22\17\1\352\4\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\15\17\1\353\11\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\6\17\1\354\20\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\54\2\2\7\54\1\355\16\54\4\2"+
    "\27\54\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\20\17\1\356\5\17\3\2\1\45\27\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\4\17\1\357\22\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\11\17\1\360\14\17"+
    "\3\2\1\45\27\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\20\17\1\361"+
    "\6\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\21\17\1\362\5\17\22\2"+
    "\1\53\1\0\73\2\1\363\24\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\22\17"+
    "\1\364\4\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\15\17\1\365\11\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\20\17\1\366\6\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\54\2\2\1\367\25\54"+
    "\4\2\27\54\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\23\17\1\370\3\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\11\17\1\371\14\17\3\2\1\45\27\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\24\17\1\372\2\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\20\17"+
    "\1\373\6\17\22\2\1\53\1\0\64\2\1\374\33\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\13\17"+
    "\1\375\12\17\3\2\1\45\27\17\22\2\1\53\1\0"+
    "\70\2\1\376\27\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\15\17\1\377\11\17"+
    "\22\2\1\53\1\0\73\2\1\u0100\24\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\54\2\2\2\54\1\u0101\23\54"+
    "\4\2\27\54\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\27\17\7\2\1\u0102"+
    "\12\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\22\17\1\u0103\4\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\24\17\1\u0104\2\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\54\2\2\10\54\1\u0105\15\54\4\2"+
    "\27\54\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\1\17\1\u0106\25\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\21\17\1\u0107\5\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\4\17\1\u0108\22\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\1\u0109\26\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\22\17\1\u010a\4\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\54\2\2\12\54\1\u010b"+
    "\13\54\4\2\27\54\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\21\17\1\u010c\4\17\3\2\1\45"+
    "\27\17\22\2\1\53\1\0\1\2\1\54\10\2\1\54"+
    "\2\2\26\54\4\2\3\54\1\u010d\23\54\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\1\u010e\26\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\22\17\1\u010f"+
    "\4\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\23\17\1\u0110\3\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\54\2\2\5\54"+
    "\1\u0111\20\54\4\2\27\54\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\13\17"+
    "\1\u0112\13\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\25\17\1\u0113\3\2\1\45\27\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\3\17\1\u0114\23\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\22\17\1\u0115\4\17\22\2\1\53\1\0\104\2\1\u0116"+
    "\13\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\27\17\6\2\1\u0117\13\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\22\17\1\u0118\4\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\26\17"+
    "\1\u0119\22\2\1\53\1\0\1\2\1\54\10\2\1\54"+
    "\2\2\12\54\1\u011a\13\54\4\2\27\54\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\11\17\1\u011b\15\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\27\17"+
    "\4\2\1\u011c\15\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\4\17\1\u011d\22\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\1\u011e\26\17\22\2\1\53\1\0"+
    "\64\2\1\u011f\33\2\1\53\1\0\70\2\1\u0120\27\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\6\17\1\u0121\20\17\22\2\1\53\1\0"+
    "\105\2\1\u0122\12\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\54\2\2\26\54\4\2\1\u0123\26\54\22\2\1\53"+
    "\1\0\62\2\1\u0124\35\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\1\u0125\26\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\1\u0126\26\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\54\2\2\26\54\4\2\4\54"+
    "\1\u0127\22\54\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\13\17\1\u0128\13\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\4\17\1\u0129\22\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\15\17\1\331\11\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\15\17"+
    "\1\u012a\11\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\4\17\1\u012b\2\17"+
    "\1\u012c\17\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\54\2\2\1\54\1\u012d\24\54\4\2\27\54\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\4\17"+
    "\1\u012e\21\17\3\2\1\45\27\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\54\2\2\26\54\4\2\4\54"+
    "\1\u012f\22\54\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\20\17\1\u0130\6\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\21\17\1\u0131\5\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\20\17\1\u0132\6\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\13\17"+
    "\1\u0133\13\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\21\17\1\u0134\5\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\16\17\1\u0119\10\17\22\2\1\53"+
    "\1\0\1\2\1\u0135\116\2\1\53\1\0\115\2\1\u0136"+
    "\2\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\1\u0137\7\17\1\u0138\16\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\54\2\2\4\54"+
    "\1\u0139\21\54\4\2\27\54\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\1\u013a"+
    "\26\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\15\17\1\u013b\11\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\21\17\1\u013c\5\17\22\2\1\53\1\0"+
    "\106\2\1\u013d\11\2\1\53\1\0\53\2\1\u013e\44\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\21\17\1\u013f\5\17\22\2\1\53\1\0"+
    "\71\2\1\342\26\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\54\2\2\26\54\4\2\21\54\1\u0140\5\54\22\2"+
    "\1\53\1\0\62\2\1\u0141\35\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\17\17"+
    "\1\u0142\7\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\2\17\1\u0143\24\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\54\2\2"+
    "\26\54\4\2\26\54\1\u0144\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\4\17"+
    "\1\u0145\22\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\22\17\1\u013f\4\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\1\u0146\26\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\2\17\1\u0147\24\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\4\17\1\u0148"+
    "\22\17\22\2\1\53\1\0\1\2\1\54\10\2\1\54"+
    "\2\2\16\54\1\u011a\7\54\4\2\27\54\22\2\1\53"+
    "\1\0\1\2\1\u0149\10\2\1\54\2\2\26\54\4\2"+
    "\27\54\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\10\17\1\u014a\16\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\1\u014b\26\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\23\17"+
    "\1\u014c\3\17\22\2\1\53\1\0\70\2\1\u014d\27\2"+
    "\1\53\1\0\53\2\1\u014e\44\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\20\17"+
    "\1\u014f\6\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\22\17\1\u0131\4\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\22\17\1\u0150\4\17\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\27\17\11\2\1\u0151\10\2\1\53\1\0\1\2"+
    "\1\u0152\10\2\1\17\2\2\26\17\3\2\1\45\27\17"+
    "\22\2\1\53\1\0\62\2\1\u0153\35\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\54\2\2\26\54\4\2\4\54"+
    "\1\u0154\22\54\22\2\1\53\1\0\53\2\1\u0155\44\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\1\u0156\26\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\27\17"+
    "\11\2\1\u0157\10\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\54\2\2\26\54\4\2\25\54\1\u0158\1\54\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\15\17\1\u0150\3\17\1\u0150\5\17\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\22\17\1\u0134\4\17\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\1\u0119\26\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\12\17\1\u0119\14\17"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\54\2\2"+
    "\26\54\4\2\17\54\1\u0159\7\54\22\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\17\2\2\26\17\3\2\1\45"+
    "\16\17\1\u015a\10\17\22\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\17\2\2\26\17\3\2\1\45\2\17\1\u015b"+
    "\24\17\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\15\17\1\u015c\11\17\22\2"+
    "\1\53\1\0\62\2\1\u015d\35\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\4\17"+
    "\1\u0131\22\17\22\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\54\2\2\26\54\4\2\2\54\1\u015e\24\54\22\2"+
    "\1\53\1\0\74\2\1\u015f\23\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\54\2\2\26\54\4\2\21\54\1\u0160"+
    "\5\54\22\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\23\17\1\u0161\3\17\22\2"+
    "\1\53\1\0\1\2\1\u0162\116\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\54\2\2\26\54\4\2\16\54\1\u0163"+
    "\10\54\22\2\1\53\1\0\1\2\1\54\10\2\1\54"+
    "\2\2\26\54\4\2\20\54\1\u0164\6\54\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\10\17\1\u0165\16\17\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\6\17"+
    "\1\u0166\20\17\22\2\1\53\1\0\65\2\1\u0167\32\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\54\2\2\26\54"+
    "\4\2\13\54\1\u0168\13\54\22\2\1\53\1\0\111\2"+
    "\1\u0169\6\2\1\53\1\0\1\2\1\54\10\2\1\17"+
    "\2\2\26\17\3\2\1\45\12\17\1\u016a\14\17\22\2"+
    "\1\53\1\0\66\2\1\u016b\31\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\54\2\2\26\54\4\2\20\54\1\u016c"+
    "\6\54\22\2\1\53\1\0\1\2\1\54\10\2\1\54"+
    "\2\2\26\54\4\2\23\54\1\u016d\3\54\22\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\27\17\12\2\1\u016e\7\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\17\2\2\26\17\3\2\1\45\4\17"+
    "\1\u016f\22\17\22\2\1\53\1\0\73\2\1\u0170\24\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\54\2\2\26\54"+
    "\4\2\1\u0171\26\54\22\2\1\53\1\0\67\2\1\u0172"+
    "\30\2\1\53\1\0\1\2\1\54\10\2\1\17\2\2"+
    "\26\17\3\2\1\45\21\17\1\u0173\5\17\22\2\1\53"+
    "\1\0\115\2\1\u0174\2\2\1\53\1\0\1\2\1\54"+
    "\10\2\1\54\2\2\26\54\4\2\3\54\1\u0175\23\54"+
    "\22\2\1\53\1\0\1\2\1\54\10\2\1\54\2\2"+
    "\26\54\4\2\4\54\1\u0176\22\54\22\2\1\53\1\0"+
    "\64\2\1\u0151\33\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\17\2\2\26\17\3\2\1\45\15\17\1\u013f\11\17"+
    "\22\2\1\53\1\0\47\2\1\u0177\50\2\1\53\1\0"+
    "\1\2\1\54\10\2\1\54\2\2\26\54\4\2\24\54"+
    "\1\u0178\2\54\22\2\1\53\1\0\71\2\1\u0179\26\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\17\2\2\26\17"+
    "\3\2\1\45\4\17\1\u017a\22\17\22\2\1\53\1\0"+
    "\107\2\1\u017b\10\2\1\53\1\0\1\2\1\54\10\2"+
    "\1\54\2\2\26\54\4\2\21\54\1\u017c\5\54\22\2"+
    "\1\53\1\0\1\2\1\54\10\2\1\54\2\2\26\54"+
    "\4\2\1\54\1\u017d\25\54\22\2\1\53\1\0\1\2"+
    "\1\54\10\2\1\54\2\2\26\54\4\2\4\54\1\u017c"+
    "\22\54\22\2\1\53\1\0\53\2\1\u017e\44\2\1\53"+
    "\1\0\1\2\1\54\10\2\1\17\2\2\26\17\3\2"+
    "\1\45\22\17\1\u017f\4\17\22\2\1\53\1\0\66\2"+
    "\1\u0180\31\2\1\53\1\0\1\2\1\54\10\2\1\54"+
    "\2\2\26\54\4\2\1\u0160\26\54\22\2\1\53\1\0"+
    "\67\2\1\u0177\30\2\1\53\1\0\47\2\1\u0181\50\2"+
    "\1\53\1\0\52\2\1\u0182\45\2\1\53\1\0\75\2"+
    "\1\u0155\21\2";

  private static int [] zzUnpacktrans() {
    int [] result = new int[27470];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\55\1\1\0\6\1\1\0\55\1\1\11\1\0\1\1"+
    "\1\0\u011c\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[386];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public RobotLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RobotLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return NON_EOL;
            }
          // fall through
          case 44: break;
          case 2:
            { return NAME;
            }
          // fall through
          case 45: break;
          case 3:
            { return WHITE_SPACE;
            }
          // fall through
          case 46: break;
          case 4:
            { return HASH;
            }
          // fall through
          case 47: break;
          case 5:
            { return STAR;
            }
          // fall through
          case 48: break;
          case 6:
            { return DOT;
            }
          // fall through
          case 49: break;
          case 7:
            { return VARIABLE_NAME;
            }
          // fall through
          case 50: break;
          case 8:
            { return EQUALS;
            }
          // fall through
          case 51: break;
          case 9:
            { return LBRACKET;
            }
          // fall through
          case 52: break;
          case 10:
            { return RBRACKET;
            }
          // fall through
          case 53: break;
          case 11:
            { return LBRACE;
            }
          // fall through
          case 54: break;
          case 12:
            { return PIPE;
            }
          // fall through
          case 55: break;
          case 13:
            { return RBRACE;
            }
          // fall through
          case 56: break;
          case 14:
            { return SIMPLE_SETTING_NAME;
            }
          // fall through
          case 57: break;
          case 15:
            { return QUOTED_STRING;
            }
          // fall through
          case 58: break;
          case 16:
            { return SCALAR_VARIABLE_START;
            }
          // fall through
          case 59: break;
          case 17:
            { return ENV_VARIABLE_START;
            }
          // fall through
          case 60: break;
          case 18:
            { return DICT_VARIABLE_START;
            }
          // fall through
          case 61: break;
          case 19:
            { return LIST_VARIABLE_START;
            }
          // fall through
          case 62: break;
          case 20:
            { return IF;
            }
          // fall through
          case 63: break;
          case 21:
            { return IN;
            }
          // fall through
          case 64: break;
          case 22:
            { return STARS;
            }
          // fall through
          case 65: break;
          case 23:
            { return END;
            }
          // fall through
          case 66: break;
          case 24:
            { return FOR;
            }
          // fall through
          case 67: break;
          case 25:
            { return TRY;
            }
          // fall through
          case 68: break;
          case 26:
            { return VAR;
            }
          // fall through
          case 69: break;
          case 27:
            { return ARG;
            }
          // fall through
          case 70: break;
          case 28:
            { return ELSE;
            }
          // fall through
          case 71: break;
          case 29:
            { return TASKS_WORDS;
            }
          // fall through
          case 72: break;
          case 30:
            { return BREAK;
            }
          // fall through
          case 73: break;
          case 31:
            { return WHILE;
            }
          // fall through
          case 74: break;
          case 32:
            { return EXCEPT;
            }
          // fall through
          case 75: break;
          case 33:
            { return RETURN;
            }
          // fall through
          case 76: break;
          case 34:
            { return COMMENTS_WORDS;
            }
          // fall through
          case 77: break;
          case 35:
            { return ELSE_IF;
            }
          // fall through
          case 78: break;
          case 36:
            { return FINALLY;
            }
          // fall through
          case 79: break;
          case 37:
            { return KEYWORDS_WORDS;
            }
          // fall through
          case 80: break;
          case 38:
            { return LIBRARY_WORDS;
            }
          // fall through
          case 81: break;
          case 39:
            { return WITH_NAME_WORDS;
            }
          // fall through
          case 82: break;
          case 40:
            { return SETTINGS_WORDS;
            }
          // fall through
          case 83: break;
          case 41:
            { return CONTINUE;
            }
          // fall through
          case 84: break;
          case 42:
            { return VARIABLES_WORDS;
            }
          // fall through
          case 85: break;
          case 43:
            { return TESTCASES_WORDS;
            }
          // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
